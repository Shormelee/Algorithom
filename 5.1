//Diameter of tree

#include<bits/stdc++.h>
using namespace std;
int matrix[10][10];
int indegree[50],visit[50];
int temp=0;
int large=0,cost=0;
int dist[100];
int main()

{
    queue<int>Q;
    int i,j,a,b,k;
    int node,edge;
    int dist[100];
    int source;

    printf("Enter node & edge: ");
    scanf("%d %d",&node,&edge);
    for(i=1; i<=edge; i++)
    {
        scanf("%d %d",&a,&b);
        matrix[a][b]=1;
        matrix[b][a]=1;
    }


    for(i=1; i<=node; i++)
    {
        for(j=1; j<=node; j++)
        {
            printf("%d ",matrix[i][j]);
        }
        printf("\n");
    }


    for(i=0; i<=50; i++)
    {
        dist[i]=-1;
    }
    scanf("%d",&source);

    dist[source]=0;

    Q.push(source);
    while(Q.size()>=1)
    {
        int front = Q.front();
        Q.pop();
        for(i=1; i<=node; i++)
        {
            if(matrix[front][i] == 1&& dist[i] == -1)
            {
                Q.push(i);
                dist[i]=dist[front]+1;
                //i++;
            }

        }
    }

    for(i=1; i<=node; i++)
    {
        cout<<"Distance from "<<source<<" to "<<i<<" : "<<dist[i]<<" "<<endl;
    }




    for (i=0; i<20; i++)
    {

        if(large<dist[i])
        {
            large=dist[i];
            cost=i;
        }

    }
    cout<<"Large Value  is "<<large<<endl;
    cout<<"Last Node  is "<<cost<<endl;


    for(i=0; i<=50; i++)
    {
        dist[i]=-1;
    }
    source = cost;
    dist[source]=0;

    Q.push(source);
    while(Q.size()>=1)
    {
        int front = Q.front();
        Q.pop();
        for(i=1; i<=node; i++)
        {
            if(matrix[front][i] == 1&& dist[i] == -1)
            {
                Q.push(i);
                dist[i]=dist[front]+1;
                //i++;
            }

        }
    }



    for(i=1; i<=node; i++)
    {
        cout<<"Distance from "<<source<<" to "<<i<<" : "<<dist[i]<<" "<<endl;
    }




    return 0;
}

/*

10 9
1 2
1 3
3 4
3 5
2 6
2 7
6 8
8 9
4 10





*/
